# Redis Configuration File Template
# This is a comprehensive redis.conf template for use in projects
# Uncomment and modify settings as needed for your specific use case

################################## NETWORK #####################################

# By default, if no "bind" configuration directive is specified, Redis listens
# for connections from all the network interfaces available on the server.
# It is STRONGLY RECOMMENDED to explicitly bind Redis to specific interfaces.
# Uncomment the line below to bind to localhost only (secure default)
# bind 127.0.0.1 ::1

# Accept connections on the specified port, default is 6379
# port 6379

# TCP listen() backlog
# tcp-backlog 511

# TCP keepalive
# tcp-keepalive 300

################################# TLS/SSL ######################################

# By default, TLS/SSL is disabled. To enable it, uncomment and configure:
# port 0
# tls-port 6380
# tls-cert-file redis.crt
# tls-key-file redis.key
# tls-ca-cert-file ca.crt

################################# GENERAL #####################################

# By default Redis does not run as a daemon. Use 'yes' if you need it.
# daemonize no

# Set the number of databases. The default database is DB 0
# databases 16

# Set server verbosity to 'debug', 'verbose', 'notice', 'warning'
# loglevel notice

# Specify the log file name. Empty string can be used to force Redis to log on stdout
# logfile ""

################################ SNAPSHOTTING  ################################

# Save the DB to disk.
# Format: save <seconds> <changes>
# Will save the DB if both conditions are satisfied:
# * At least <seconds> seconds have passed since the last save
# * At least <changes> write operations have occurred

# Save after 15 minutes if at least 1 key changed
save 900 1
# Save after 5 minutes if at least 10 keys changed  
save 300 10
# Save after 1 minute if at least 10000 keys changed
save 60 10000

# By default Redis will stop accepting writes if RDB snapshots are enabled
# and the latest background save failed.
stop-writes-on-bgsave-error yes

# Compress string objects using LZF when dump .rdb databases
rdbcompression yes

# Checksum the RDB file
rdbchecksum yes

# The filename where to dump the DB
dbfilename dump.rdb

# The working directory where the DB will be written
dir ./

################################# REPLICATION #################################

# Master-Replica replication settings
# Uncomment and configure if setting up replication:
# replicaof <masterip> <masterport>
# masterauth <master-password>
# replica-serve-stale-data yes
# replica-read-only yes

################################## SECURITY ###################################

# Require clients to issue AUTH <PASSWORD> before processing any other commands
# WARNING: since Redis is pretty fast, an outside user can try up to
# 1 million passwords per second against a modern box.
# requirepass your_secure_password_here

# Command renaming for security
# You can rename dangerous commands or disable them entirely
# Example: rename CONFIG to something hard to guess
# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
# Example: disable FLUSHDB and FLUSHALL commands
# rename-command FLUSHDB ""
# rename-command FLUSHALL ""

################################### CLIENTS ####################################

# Set the max number of connected clients at the same time
# maxclients 10000

############################## MEMORY MANAGEMENT #############################

# Set a memory usage limit to the specified amount of bytes
# When the memory limit is reached Redis will try to remove keys
# according to the eviction policy selected (see maxmemory-policy)
# maxmemory 256mb

# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory
# is reached. You can select among five behaviors:
#
# volatile-lru -> Evict using approximated LRU among the keys with an expire set.
# allkeys-lru -> Evict any key using approximated LRU.
# volatile-lfu -> Evict using approximated LFU among the keys with an expire set.
# allkeys-lfu -> Evict any key using approximated LFU.
# volatile-random -> Remove a random key among the ones with an expire set.
# allkeys-random -> Remove a random key, any key.
# volatile-ttl -> Remove the key with the nearest expire time (minor TTL)
# noeviction -> Don't evict anything, just return an error on write operations.
#
# The default is: noeviction
# maxmemory-policy noeviction

############################# LAZY FREEING ####################################

# Redis has two primitives to delete keys. One is called DEL and is a blocking
# deletion of the object. The other is called UNLINK (non-blocking deletion).
# lazyfree-lazy-eviction no
# lazyfree-lazy-expire no
# lazyfree-lazy-server-del no
# replica-lazy-flush no

############################ KERNEL OOM CONTROL ##############################

# On Linux, it is possible to hint the kernel OOM killer on what processes
# should be killed first when out of memory.
# oom-score-adj no

############################## APPEND ONLY FILE ###############################

# By default Redis asynchronously dumps the dataset on disk. This mode is
# good enough in many applications, but an issue with the Redis process or
# a power outage may result into a few minutes of writes lost.
#
# The Append Only File is an alternative persistence mode that provides
# much better durability.
appendonly no

# The name of the append only file (default: "appendonly.aof")
appendfilename "appendonly.aof"

# The fsync() call tells the Operating System to actually write data on disk
# instead of waiting for more data in the output buffer.
# 
# Redis supports three different modes:
#
# no: don't fsync, just let the OS flush the data when it wants.
# always: fsync after every write to the append only log.
# everysec: fsync only one time every second (compromise).
appendfsync everysec

# When the AOF fsync policy is set to always or everysec, a background
# saving process (a background save or AOF log background rewriting) 
# performs a lot of I/O against the disk.
no-appendfsync-on-rewrite no

# Automatic rewrite of the append only file
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

# An AOF file may be found to be truncated at the end during startup process
aof-load-truncated yes

# When rewriting the AOF file, Redis is able to use an RDB preamble in the
# AOF file for faster rewrites and recoveries.
aof-use-rdb-preamble yes

################################ LUA SCRIPTING  ###############################

# Max execution time of a Lua script in milliseconds
lua-time-limit 5000

################################## SLOW LOG ###################################

# The Redis Slow Log is a system to log commands that exceeded a specified
# execution time. The execution time does not include I/O operations.
slowlog-log-slower-than 10000

# There is no limit to this length. Just be aware that it will consume memory.
slowlog-max-len 128

################################ LATENCY MONITOR ##############################

# The Redis latency monitoring subsystem samples different operations
# at runtime in order to collect data related to possible sources of latency.
latency-monitor-threshold 0

############################# EVENT NOTIFICATION ##############################

# Redis can notify Pub/Sub clients about events happening in the key space.
# This feature is documented at http://redis.io/topics/notifications
#
# For instance if keyspace events notification is enabled, and a client
# performs a DEL operation on key "foo" stored in the Database 0, two
# messages will be published via Pub/Sub:
#
# PUBLISH __keyspace@0__:foo del
# PUBLISH __keyevent@0__:del foo
#
# notify-keyspace-events ""

############################### ADVANCED CONFIG ###############################

# Hashes are encoded using a memory efficient data structure when they have a
# small number of entries, and the biggest entry does not exceed a given
# threshold. These thresholds can be configured using the following directives.
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

# Lists are also encoded in a special way to save a lot of space.
list-max-ziplist-size -2

# Sets have a special encoding in just one case: when a set is composed
# of just strings that happen to be integers in radix 10 in the range
# of 64 bit signed integers.
set-max-intset-entries 512

# Similarly to hashes and lists, sorted sets are also specially encoded in
# order to save a lot of space.
zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# HyperLogLog sparse representation bytes limit.
hll-sparse-max-bytes 3000

# Streams macro node max size / items.
stream-node-max-bytes 4096
stream-node-max-entries 100

# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in
# order to help rehashing the main Redis hash table (the one mapping top-level keys to values).
activerehashing yes

# The client output buffer limits can be used to force disconnection of clients
# that are not reading data from the server fast enough for some reason.
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# Client query buffers accumulate new commands. They are limited to a fixed
# amount by default in order to avoid that a protocol desynchronization bug
# or other bugs create a very large query buffer in memory.
client-query-buffer-limit 1gb

# In the Redis protocol, bulk requests, that are, elements representing single
# strings, are normally limited to 512 mb.
proto-max-bulk-len 512mb

# Redis calls an internal function to perform many background tasks, like
# closing connections of clients in timeout, purging expired keys that are
# never requested, and so forth.
hz 10

# When a child rewrites the AOF file, if the following option is enabled
# the file will be fsync-ed every 32 MB of data generated.
aof-rewrite-incremental-fsync yes

# When redis saves RDB file, if the following option is enabled
# the file will be fsync-ed every 32 MB of data generated.
rdb-save-incremental-fsync yes

################################## INCLUDES ###################################

# Include one or more other config files here. This is useful if you
# have a standard template that goes to all Redis servers but also need
# to customize a few per-server settings.
#
# include /path/to/local.conf
# include /path/to/other.conf
